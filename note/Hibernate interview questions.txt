1. What is Hibernate.

Hibernate is an object-relational mapping (ORM) tool that maps POJO - plain old Java objects - to relational database tables.
Hibernate is implementation of JPA.

2. What is ORM.
ORM is object relational mapping. It is a tool which maps POJO to relational database table.

3. How hibernate maps POJO and database tables.
There are 2 ways of mapping POJO & database tables.
	a. JPA annotations (Preferred)
	b. XML Configurations.

4. Advantages of Hibernate over jdbc? 
	
a. Hibernate eliminates all the boiler-plate code that comes with JDBC.
b. It supports HQL.
c. In JDBC transactions have to managed by ourself whereas Hibernate manages transactions implicitly.
d. Hibernate wraps the JDBC exceptions and throws unchecked exceptions like JDBCException or HibernateException. 
   This along with the built-in transaction management system helps developers to avoid writing multiple try-catch blocks to handle exceptions. 
   In the case of JDBC, it throws a checked exception called SQLException thereby mandating the developer to write try-catch blocks to handle this exception at compile time.
e. Hibernate Supports Caching.

5. Important Interfaces Of Hibernate.

Important Interfaces In Hibernate.
	a. Session
	b. SessionFactory
	c. Transaction

6. What is Session.

A session is an object that maintains the physical connection between Java application and DB. 
Session also has methods for performing CRUD operations (from DB) using methods like persist(), load(), get(), update(), delete(), etc. 
Additionally, It has factory methods to return Query, Criteria and Transaction objects.

7. What is SessionFactory.

SessionFactory provides an instance of Session. 
It is a class that gives the Session objects based on the configuration parameters in order to establish the connection to the database.
The application generally has a single instance of SessionFactory. 
The internal state of a SessionFactory which includes metadata about ORM is immutable, i.e once the instance is created, it cannot be changed.

8. Important Annotations.

@Entity - used to specify hat they are entity bean.
@Table - used with entity bean to define corresponding table name.
@Id - used to define primary key
@Column - used to define column name.
EmbeddedId, Generated Value, etc.

9. Mapping 

One-to-One : use @OneToOne annotation.
Many-to-One
Many-to-Many : use @ManyToMany annotation.

10. What is hibernate configuration file. Is it different from application.properties

a. It contains database specific configuration, which is used to initilize sessionFactory.
c. Conventionally, it should be named as hibernate.cfg.xml. It is placed under src/main/resource folder.
d. List of Properties used in cfg file 
	i. hibernate.dialect
	ii. hibernate.connection.driver_class
	iii. hibernate.connection.url
	iv. hibernate.connection.username
	v. hibernate.connection.password
	vi. hibernate.connection.autocommit

11. What is hibernate mapping file.

This mapping file instructs Hibernate â€” how to map the defined class or classes to the database tables.
Instead of using xml file we can use annotations as well.
Conventionally it is named as <className>.hbm.xml.
	a. <hibernate-mapping></hibernate-mapping> -> it is root element.
	b. class -> specifies the persistent class. persistent class is POJO file
	c. id -> specifies the primary key attribute to the class.
	d. generator -> used to generate primary key.
	e. property -> specify property name of persistent class.
eg.
<hibernate-mapping>
	<class name = "com.Employee" table = "empTable">
		<id name = "id">
			<generator class = "assigned"></generator>
		</id>
		<property name = "firstName"></property>
		<property name = "lastName"></property>
	</class>	
</hibernate-mapping>

12. Steps to Create Sample App for Hibernate.

a. Create Persistent Class(POJO)
b. Create the mapping.
c. Create the configuration file.
d. Create class for creating and storing the persistent POJO.
e. Run the application to see results.

13. Difference between openSession() & getCurrentSession()?

openSession() -> helps in opening new session.
		We should close the session object once we are done with DB operations.
		In a multiThreaded environment we should open a new session for each request.

getCurrentSession() -> return the session bound to the context.
			Since this session object belongs to context of hibernate, it is okay if we don't close it.
			Once the sessionFactory is closed, this session object gets closed. 

14. Difference between Session get() & load() method?

get()
a. return null if object is not found in cache as well as on DB.
b. involves in DB hit if object does not exist in session cache and return a fully initialized object which may involve several DB call.
c. should be used when we are not sure that Object exist in DB or not.

load()
a. throws ObjectNotFoundException if object is not found in cache as well as on DB, but never returns null.
b. returns proxy Object and only initialize the object or hit the DB if any method other then getId() is called on persistent or entity Object. This is lazy initialization which increase performance.
c. should be used when we are sure that Object exist in DB.

15. Why Hibernate Caching and types?

Why Caching? -> Makes application faster and improves performance. The idea behind caching is to reduce DB queries.
First Level Caching
Second Level Caching
Query Level Caching

16. First Level Caching.
The first-level cache is the Session cache and is a mandatory cache through which all requests must pass.
It is by default enabled and there is no way we can disable it. But Hibernate provides methods so that the cache can be cleared.
* An object cached in a session will not be visible to other sessions and when session is closed, all the cached objects will also be lost.

17. Second Level Caching.
The second-level-cache is optional and disabled by default. We can enable it by configurations.
Currently EHCache and infinispan provides implementation for Hibernate Second Level Cache.

18. Query Level Caching.
Query Level Cache should be used in conjuction with Second Level Cache.
It never works with first level cache.

19. How to configure/ use EH cache.
Configuring EH Cache in 4 steps.
	a. Add hibernate-ehcache dependency in your maven project 
		<dependency>
			<groupId>org.hibernate<groupId>
			<artifactId>hibernate-ehcache</artifactId>
		</dependency>
	b. 
20. Some Methods in JPA Repository interface.
findAll(), findById(), getById(), saveAll(), findAllById().

21. How Can we see Hibernate generated SQL on Console.
spring.jpa.show-sql = true

22. Creating CRUD using Hibernate and Spring Boot. EXPLAINED IN CODE DECODE VIDEO --> Spring Boot CRUD


23. Custom Exception Handling in Spring Boot. EXPLAIN IN CODE DECODE VIDEO --> Custom Exception Handling in Spring Boot