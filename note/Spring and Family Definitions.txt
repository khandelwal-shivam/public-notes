1. What is Spring Bean. Difference between JavaBean and POJO.

Spring Bean is an POJO that is instantiated and managed by a Spring IoC container.
***************Diff between Bean & POJO****************
POJO is on ordinary Java Object and not bound by any special restriction.
JavaBean are special type of POJO. There are some restrictions on POJO to be a Javabean.
	1. All JavaBeans are POJOs but not all POJOs are JavaBeans.
	2. Serializable i.e. they should implement Serializable interface. 
	3. Fields should be private. This is to provide complete control on fields.
	4. Fields should have getters or setters or both.
	5. A no-arg constructor should be there in a bean.
	6. Fields are accessed only by constructor or getter setters.
	
Different Ways Of Creating Beans.

	
	There are three different ways in which you can define a Spring bean:

	a. annotating your class with the @Component annotation (or its derivatives)
	b. writing a bean factory method annotated with the @Bean annotation in a custom Java configuration class
	c. declaring a bean definition in an XML configuration file

Different ways of Configuring Beans in Spring

what is meant by Creating a Bean and Configuring a Bean in java? Are they both same.
---------------------------------------------------------------------------------------------------------------------------------------------------
2. What is IOC(Inversion Of Control) and What is Dependency Injection.

IOC = IOC means giving the control of creating and instantiating the spring beans to the Spring IOC container.

DI = Dependency Injection is a technique in which an object receives other object that it depends on. 
These other objects are called dependencies. 
It is used to implement IoC.
It is a process whereby objects define their dependencies, that is, the other objects they work with, only through 
	a. constructor arguments
	b. arguments to a factory method 
	c. properties that are set on the object instance after it is constructed or returned from a factory method.
----------------------------------------------------------------------------------------------------------------------------------------------------
3. How MicroServices Interact with each other? Explain restTemplate.getForEntity() & restTemplate.getForObject()

We can use RestTemplate and Feign Client.
But why not eureka-client-service.
getForEntity() & getForObject() both fetches data from the provided url. Difference lies in what type of data they fetches.
getForEntity() returns data of type ResponseEntity where as getForObject() returns data of type Object. 
In ResponseEntity we have control of Headers,Body Http Status.
There are bunch of other methods in RestTemplate like exChange() or execute().
----------------------------------------------------------------------------------------------------------------------------------------------------
4. What is class path and what it is used for? 

CLASSPATH defines the path, to find third-party and user-defined classes that are not part of Java platform.
----------------------------------------------------------------------------------------------------------------------------------------------------
5. How to handle response timeout while calling an API. ReadTimeOut vs ServerTimeOut.

Server Time Out :- Happens when we are not able to establish a connection with server with in a required time period.

Read Time Out:- Happens when we are able to establish a connection with server, but reading data takes a lot of time or we are not able to read the data.
----------------------------------------------------------------------------------------------------------------------------------------------------
6. What is versioning in Rest? What are the ways that we can use to implement versioning?

Versions helps us to identify the old version and new version in Rest APi.
We can implement versioning using multiple ways for Rest API.
a. Using request parameters
b. Using headers
c. Using URL/URI
d. Using produces.
-----------------------------------------------------------------------------------------------------------------------------------------------------